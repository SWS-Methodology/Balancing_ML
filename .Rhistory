install_github("conSTable",username="mrpozzi",ref="master")#
ls()#
FBS#
install.packages("Downloads/scde_1.1.tar.gz", type="source")#
library(scde)#
#
sessionInfo()#
#
remove.packages("scde") #
remove.packages("scde") #
#
detach("package:scde")#
install.packages("Downloads/scde_1.1.tar.gz", type="source")#
#
library(scde)#
sessionInfo()#
scde::scde.browse.diffexp#
require#
install.packages(dplyr)#
install.packages("dplyr")#
library(dplyr)#
?filter#
install.packages("nycflights13")#
browseVignettes(package="dplyr")#
install.packages("animation")#
library(animation)#
animation#
x = seq(-5, 5, length = 50)#
y = seq(-5, 5, length = 50)#
square = as.matrix(expand.grid(x, y))#
square#
x#
angle = pi/180#
rotation =#
matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)#
rotation#
saveGIF(#
{#
init = square#
for(i in seq(0, 2 * pi, length = 360)){#
tmp = init#
distFromCenter = sqrt(tmp[, 1]^2 + tmp[, 2]^2)#
tmp[, 2] = tmp[, 2] + 10 * sin(i - distFromCenter)#
colIntensity = (tmp[, 2] + abs(min(tmp[, 2])))/#
max((tmp[, 2] + abs(min(tmp[, 2]))))#
plot(tmp[, c(1, 2)], xlim = c(-10, 10), ylim = c(-20, 20),#
pch = ".", cex = 3, axes = FALSE, xlab = "", ylab = "",#
col = rgb(colIntensity, 0, 0))            #
init = init %*% rotation#
}#
},#
movie.name = "./wave.gif", interval = 0.005,#
nmax = 30, ani.width = 800,  ani.height = 800#
)#
a <- cbind(rnorm(10),rnorm(10))#
abline(h=-1)#
distancePointLine <- function(x, y, slope, intercept) {#
x1 <- x-10#
x2 <- x+10#
y1 <- x1*slope+intercept#
y2 <- x2*slope+intercept#
distancePointSegment(x,y, x1,y1, x2,y2)#
}#
#
distancePointSegment <- function(px, py, x1, y1, x2, y2) {#
lineMagnitude <- function(x1, y1, x2, y2) sqrt((x2-x1)^2+(y2-y1)^2)#
ans <- NULL#
ix <- iy <- 0   #
lineMag <- lineMagnitude(x1, y1, x2, y2)#
if( lineMag < 0.00000001) {#
warning("short segment")#
return(9999)#
}#
u <- (((px - x1) * (x2 - x1)) + ((py - y1) * (y2 - y1)))#
u <- u / (lineMag * lineMag)#
if((u < 0.00001) || (u > 1)) {#
ix <- lineMagnitude(px, py, x1, y1)#
iy <- lineMagnitude(px, py, x2, y2)#
if(ix > iy)  ans <- iy#
else ans <- ix#
} else {#
ix <- x1 + u * (x2 - x1)#
iy <- y1 + u * (y2 - y1)#
ans <- lineMagnitude(px, py, ix, iy)#
}#
ans#
}#
segments(-0.5, -2, x1 = 0.5, y1 = -1)#
distancePointSegment(a[1,1],a[1,2],-0.5,-2,0.5,-1)#
a[1,]#
a#
a[11,] <- c(1.5,0)#
rbind(a,c(1.5,0))#
a <- rbind(a,c(1.5,0))#
distancePointSegment(a[11,1],a[11,2],-0.5,-2,0.5,-1)#
plot(a)#
segments(-0.5, -2, x1 = 0.5, y1 = -1)#
#
distancePointSegment(a[9,1],a[9,2],-0.5,-2,0.5,-1)#
segments(-.5,0,1,0)#
distancePointSegment(a[11,1],a[11,2],-.5,0,1,0)#
ls()#
dir()#
library(conSTable)#
rm(list=ls())#
gc()#
ls()#
remove.packages("conSTable") #
detach("package:conSTable")#
.libPaths()#
FBS#
FBS[["USA"]]#
FBS[["USA"]][["2009"]]#
rm(list=ls())#
ls()#
library()#
vignette("rpart")#
vignette(topic="rpart")#
vignette(topic=c("rpart"))#
b <- 120#
k <- 3#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_inf#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_sup#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
lim_sup_int#
lim_inf_int#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind+inf + (ind_sup-ind_inf)/2#
if(choose(poss_sol[mid],k)==b){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
get_n(120,3)#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(choose(poss_sol[mid],k)==b){return(poss_sol[mid])}#
else{if(choose(poss_sol[mid],k)<b){ind_inf <- mid+1}#
else{ind_sup <- mid-1}#
}		#
}#
}#
get_n(120,3)#
choose(50,4)#
choose(50,14)#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
for (i in poss_sol){#
if(choose(i,k)==b){#
return(i)#
break#
}#
}#
}#
get_n(937845656300,14)#
choose(50,34)#
get_n(4.92369e+12,14)#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(choose(poss_sol[mid],k)==b){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
get_n(4.92369e+12,14)#
#
get_n(4.92369e+12,34)#
#
factoria(34)*4.92369e+12#
factorial(34)*4.92369e+12#
(factorial(34)*4.92369e+12)^(1/34)#
(factorial(34)*4.92369e+12)^(1/34)+34#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
browser()#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(choose(poss_sol[mid],k)==b){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
lim_inf#
lim_sup#
poss_col#
mid[17]#
poss_sol[17]#
poss_sol[18]#
choose(poss_sol[mid], k)<b#
ind_inf#
choose(poss_sol[mid],k)<b#
ind_sup#
poss_sol#
poss_sol[26]#
mid#
choose(poss_sol[mid], k) < b#
install.packages(gmp)#
install.packages("gmp")#
library(gmp)#
as.bigz(4.92369e+12)#
#
library(gmp)#
library(gmp)#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
browser()#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(as.bigz(choose(poss_sol[mid],k))==as.bigz(b)){#
return(poss_sol[mid])#
}else{#
if(as.bigz(choose(poss_sol[mid],k))<as.bigz(b)){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
#
library(gmp)#
library(gmp)#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(as.bigz(choose(poss_sol[mid],k))==as.bigz(b)){#
return(poss_sol[mid])#
}else{#
if(as.bigz(choose(poss_sol[mid],k))<as.bigz(b)){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
get_n(as.bigz(4.92369e+12),34)#
.Machine()#
.Machine#
.Machine$double.eps#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
browser()#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(abs(choose(poss_sol[mid],k)-b)<.Machine$double.eps){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
if(abs(choose(poss_sol[mid],k)-b)<.Machine$double.eps){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
4.92369e+12==4.92369e+12#
#
get_n <- function(b,k){#
lim_inf <- (factorial(k)*b)^(1/k)#
lim_sup <- (factorial(k)*b)^(1/k) + k#
lim_inf_int <- ceiling(lim_inf)#
lim_sup_int <- floor(lim_sup)#
poss_sol <- seq(from=lim_inf_int,to=lim_sup_int,by=1)	#
ind_inf <- 1#
ind_sup <- length(poss_sol)#
while(ind_inf <= ind_sup){#
mid <- ind_inf + (ind_sup-ind_inf)/2#
browser()#
if(abs(choose(poss_sol[mid],k)-b)<.Machine$double.eps){#
return(poss_sol[mid])#
}else{#
if(choose(poss_sol[mid],k)<b){#
ind_inf <- mid+1#
}else{#
ind_sup <- mid-1#
}#
}#
}#
}#
get_n(4.92369e+12,34)#
poss_sol[mid]#
n#
choose(poss_sol[mid], k) == b#
choose(poss_sol[mid], k)#
b#
print(b)#
print(b,digits=12)#
print(b,digits=18)#
print(choose(poss_sol[mid],k),digits=18)#
4923689695575L#
1665535004661L > 2*10^9 #
2*10^9#
Q#
library(FAOSTAT)#
plot( 1:10, 1:10, type="n")#
data( lennon)#
add.image( 5,4,lennon, col=grey( (0:256)/256))#
?add.scope#
ls()#
library(devtools)#
devtools::install_github("monocle-release",username="cole-trapnell-lab")#
aa#
mycalc <- (log(3)+x)*5*(6+y)^2#
mycalc#
a <- c(1,5,6,8,7,3,4,7,9,9,3,4,2)#
b <- c("blue","red","blue","yellow","orange","black","green","purple","white","pink","gray","blue","black")#
c <- c(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE)#
class(a)#
class(b)#
class(c)#
obj <- rbind(a,b,c) #
obj#
obj2 <- cbind(a,b,c) #
obj2#
class(obj2)#
obj <- data.frame(a,b,c)#
class(obj)#
?View#
View(obj)#
fix(obj)#
save(obj, file="obj.Rdata")#
var1 <- as.numeric(var1)#
var0 <- c(64,76,66,47,72,82,66,58,64,69,80,57,66,63,71,55,57,71,45,77,69,61,47,55,59,45,61,56,68,74,55,71,72,64,52,62,69,53,76,62,65,54,73,79,74,38,61,73,75,71,74,52,48,45,65,59,79,78,82,61,70,73,68,76,71,65,78,65,80,69,73,70,80,50,67,70,63,68,70,37,73,68,53,73,79,76,68,80,79,78,75,82,72,77,75,66,72,66,66,58,70,71,69,81,74,45,73,81,71,76,79,80,72,64,81,79,74,69,75,56,62,60,83,55,74,47,70,59,47,81,73,59,74,70,69,81,29,77,72,78,68,60,65,83,66,76,68,80,82,79,74,74,22,62,81,75,75,44,72,75,72,77,76,67,70,76,42,56,76,84,75,76,83,73,63,50,78,70,79,74,59,54,74,68,72,82,69,48,64,48,78,62,87,79,65,70,85,80,79,72,71,77,76,79,76,81,82,70,65,79,76,83,75,63,52,80,86,63,68,69,78,82,74,86,69,85,72,64,57,74,78,22,77,64,63,51,74,71,71,47,63,66,73,43,72,75,81,40,56,71,77,77,71,69,68,58,64,76,73,81,73,81,59,68,57,62,66,76,66,47,72,82,66,58,64,69,80,57,66,63,71,55,57,71,45,77,69,61,47,55,59,45,61,56,68,74,52,71,72,64,52,62,69,53,76,62,65,54,73,79,74,38,61,73,75,71,75,82,72,77,75,66,72,66,66,58,81,74,45,73,81,71,76,79,80,72,64,8
#
)#
a#
install_github("monocle-release")#
source("http://bioconductor.org/biocLite.R")#
biocLite("HSMMSingleCell")#
ls()#
ls()#
getwd()
library(ABSOLUTE)
?vignette
vignette("ABSOLUTE")
vignette(package = "ABSOLUTE")
vignette(package = "HAPSEG")
?ABSOLUTE::RunAbsolute
?ABSOLUTE::CreateReviewObject
ABSOLUTE::ExtractReviewedResults
?ABSOLUTE::ExtractReviewedResults
ABSOLUTE::RunAbsolute
HAPSEG::RunHapSeg
registerDoSEQ()
?registerDoSEQ
library(HAPSEG)
plate.name <- "DRAWS"
snp.file.base <- "./paper_example"
snp.file.base
getwd()
snp.file.post <- "snp_byAllele.RData"
seg.fn <- "./paper_example/mix250K_seg_out.txt"
clusters.fn <- "./paper_example/birdclusters.RData"
results.dir.base <- "./output"
phased.bgl.dir <- "./paper_example/phasedBGL/hg18"
genome <- "hg18"
platform <- "SNP_250K_STY"
pop <- "CEPH"
impute.gt <- FALSE
plot.segfit <- TRUE
merge.small <- TRUE
merge.close <- TRUE
min.seg.size <- 5
normal <- FALSE
out.p <- 0.001
seg.merge.thresh <- 1e-10
use.normal <- TRUE
adj.atten <- FALSE
snp.fn <- file.path(snp.file.base,
paste(scan, snp.file.post, sep="."))
scan
snp.file.post
suppressMessages({#
library(faosws)#
library(faoswsUtil)#
library(faoswsProductionImputation)#
library(zoo)#
library(lattice)#
library(data.table)#
library(magrittr)#
library(reshape2)#
library(igraph)#
library(lme4)#
})#
#
startingTime = Sys.time()#
currentTime = startingTime#
requiredCountries = "840"#
selectedYear = as.character(1992:2015)#
#
areaVar = "geographicAreaM49"#
yearVar = "timePointYears"#
itemVar = "measuredItemCPC"#
elementVar = "measuredElement"#
valuePrefix = "Value_"#
flagObsPrefix = "flagObservationStatus_"#
flagMethodPrefix = "flagMethod_"#
GetTestEnvironment(#
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",#
token = "09aeec5c-2cf5-46f7-90e7-f8b4bdc6dc93"#
)#
GetTestEnvironment(#
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",#
token = "09aeec5c-2cf5-46f7-90e7-f8b4bdc6dc93"#
)#
#
a= "NCCACAGAGAGATGCTACTTTCTGTCTTAGAAAATCCAACCACAACCAGCCTGTTGGTTCCAGGGCAGTAGGCAAGTGGGGTTAGGAGAAAGGAAGAG"
length(a)
length(t(a))
nchar(a)
getwd()#

suppressMessages({#
	library(faosws)#
	library(faoswsUtil)#
	library(data.table)#
	library(magrittr)#
	library(reshape2)#
	library(dplyr)#
})#
setwd("~/Documents/Balancing_ML/")#

tab = tbl_df(fread("sample_balance_table.csv",header=T))#

NAs = filter(tab,is.na(Value))#

tab = filter(tab,!is.na(Value))#

tab_fl = filter(tab, !(measuredElement %in% c(171,181)))#

tab_fl#

ttab = ttab %>% #
	mutate(#
		Distr = ifelse(Dist=="mu,sigma", "dnorm", #
		ifelse(Dist == "logmu,logsigma","dlnorm", #
		ifelse(Dist == "alpha,beta","dbeta","dexp"))),#
		Params = paste0("params[",match(measuredElement,elements),"]"),#
		Member = paste0("+ ",Distr,"(",Params, ",",Values,",log=T)")#
	)#

ttab$Member#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		Likelihood = paste(Member, collapse = " ")#
	)#

ttab_like$Likelihood#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		many = n()#
		Likelihood = paste(Member, collapse = " ")#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		many = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

unique(ttab_like$many)#

ttab_like[5,]#

ttab_like[5,5]#

sort(unique(ttab_like$many))#

pi#

(e^(0.2231*2))/(2*pi*e)#

exp#

ln(`1`)#

ln(1)#

log(1)#

e#

ee#

?log()#

exp(log(1))#

log(exp(3))#

?base::pi#

rnorm(100,22,000, 0.0915)#

rnorm(100,22000, 0.0915)#

hist(rnorm(100,22000, 0.0915))#

hist(rnorm(1000,22000, 0.0915))#

?rcauchy#

rlnorm((ln(22000), 8.798e-06))#

rlnorm(100,(ln(22000), 8.798e-06))#

rlnorm(100,log(22000), 8.798e-06))#

rlnorm(100,log(22000), 8.798e-06)#

hist(rlnorm(1000,log(22000), 8.798e-06))#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

sample(1,7)#

sample(1:7,1)#
#

sample(1:7,1)#

head(ttab)#
#

head(tab)#

head(ttab_like)#

ttab_like[6,]#

?dnorm#

plot(dnorm(1000,0,1))#

plot(dnorm(10,0,1))#

hist(dnorm(10,0,1))#

f = sum(fit$par)#

c(fit$par, f)#

plot( -10:20, sapply(-10:20, function(x){likelihood(c(x, 2))}))#

plot( -10:100, sapply(-10:100, function(x){likelihood(c(x, 2))}))#

plot( -10:100, sapply(-10:100, function(x){likelihood(c(10, x))}))#

ab = filter(ttab,geographicAreaM49==106)#

dim(ab)#

ab = filter(ttab,measuredItemCPC==1016)#

ab#

match(ab$measuredElement,elements)#

setdiff(elements,match(ab$measuredElement,elements))#

ab$measuredElement %in% elements#

elements %in% ab$measuredElement#

(elements %in% ab$measuredElement)*1#

paste((elements %in% ab$measuredElement)*1,collapse=",")#

ttab = ttab %>% #
	mutate(#
		Distr = ifelse(Dist=="mu,sigma", "dnorm", #
		ifelse(Dist == "logmu,logsigma","dlnorm", #
		ifelse(Dist == "alpha,beta","dbeta","dexp"))),#
		Params = paste0("params[",match(measuredElement,elements),"]"),#
		Member = paste0("- ",Distr,"(",Params, ",",Values,",log=T)"),#
		presents = paste((elements %in% ab$measuredElement)*1,collapse=",")#
	)#

ttab$presents#

ttab = tab_fl %>%#
	group_by(geographicAreaM49, timePointYears, #
		measuredElement,measuredItemCPC) %>%#
	summarize(#
		Dist = paste(fbsDistribParam, collapse=","),#
		Values = paste(Value, collapse = ",")#
	)#
ttab = ttab %>% #
	mutate(#
		Distr = ifelse(Dist=="mu,sigma", "dnorm", #
		ifelse(Dist == "logmu,logsigma","dlnorm", #
		ifelse(Dist == "alpha,beta","dbeta","dexp"))),#
		Params = paste0("params[",match(measuredElement,elements),"]"),#
		Member = paste0("- ",Distr,"(",Params, ",",Values,",log=T)"),#
		presents = paste((elements %in% measuredElement)*1,collapse=",")#
	)#

ttab = ttab %>%  #
	select(#
		geographicAreaM49, timePointYears, #
		measuredElement, measuredItemCPC, Member, presents#
	)#

ttab$presents#
#

ttab = ttab %>%  #
	select(#
		geographicAreaM49, timePointYears, #
		measuredElement, measuredItemCPC, Member#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=",")#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=","),#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=","),#
		signs = "-,-,+,-,+,+,+,+,+",#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

head(ttab_like$Likelihood)#

elements#
#
ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=","),#
		signs = "-,-,+,-,+,+,+,+,+",#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#
ttab_like#

head(ttab)#

ttab = tab_fl %>%#
	group_by(geographicAreaM49, timePointYears, #
		measuredElement,measuredItemCPC) %>%#
	summarize(#
		Dist = paste(fbsDistribParam, collapse=","),#
		Values = paste(Value, collapse = ",")#
	)#
ttab = ttab %>% #
	mutate(#
		Distr = ifelse(Dist=="mu,sigma", "dnorm", #
		ifelse(Dist == "logmu,logsigma","dlnorm", #
		ifelse(Dist == "alpha,beta","dbeta","dexp"))),#
		Params = paste0("params[",match(measuredElement,elements),"]"),#
		Member = paste0("- ",Distr,"(",Params, ",",Values,",log=T)"),#
	)#

ttab = tab_fl %>%#
	group_by(geographicAreaM49, timePointYears, #
		measuredElement,measuredItemCPC) %>%#
	summarize(#
		Dist = paste(fbsDistribParam, collapse=","),#
		Values = paste(Value, collapse = ",")#
	)#
ttab = ttab %>% #
	mutate(#
		Distr = ifelse(Dist=="mu,sigma", "dnorm", #
		ifelse(Dist == "logmu,logsigma","dlnorm", #
		ifelse(Dist == "alpha,beta","dbeta","dexp"))),#
		Params = paste0("params[",match(measuredElement,elements),"]"),#
		Member = paste0("- ",Distr,"(",Params, ",",Values,",log=T)")#
	)#

ttab = ttab %>%  #
	select(#
		geographicAreaM49, timePointYears, #
		measuredElement, measuredItemCPC, Params, Member#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=","),#
		signs = "-,-,+,-,+,+,+,+,+",#
		params = paste(Params,collapse=",")#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

ttab_like = ttab %>%#
	group_by(geographicAreaM49, timePointYears, measuredItemCPC) %>%#
	summarize(#
		presents = paste((elements %in% measuredElement)*1,collapse=","),#
		signs = "-,-,+,-,+,+,+,+,+",#
		params = paste(Params,collapse=","),#
		nelements = n(),#
		Likelihood = paste(Member, collapse = " ")#
	)#

elements#

ttab_like#
#

unique(ttab_like$nelements)#

sort(unique(ttab_like$nelements))#

Pmean = 10#
Psigma = 0.001#
Imean = 2#
Isigma = .5#
Fmean = 3#
Fsigma = 0.1#
Smean = 0#
Ssigma = 10#

likelihood = function(params){#
    p = params[1]#
    i = params[2]#
    f = p + i#
    s = 0#
    -dnorm(p, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(f, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(i, mean = Imean, sd = Isigma, log = TRUE)#
#
}#

likelihood(c(100, 2))#

f = sum(fit$par)#
c(fit$par, f)#

food = sum(fit$par)#
c(fit$par, food)#

likelihood = function(params){#
    prod = params[1]#
    imp = params[2]#
    food = p + i#
    s = 0#
    -dnorm(prod, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(food, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(imp, mean = Imean, sd = Isigma, log = TRUE)#
#
}#

likelihood(c(10, 2))#
likelihood(c(100, 2))#
#
fit = optim(par = c(10, 2), fn = likelihood, lower = rep(0, 2),#
            method = "L-BFGS-B")#
food = sum(fit$par)#

likelihood(c(10, 2))#

likelihood = function(params){#
    prod = params[1]#
    imp = params[2]#
    food = prod + imp#
    s = 0#
    -dnorm(prod, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(food, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(imp, mean = Imean, sd = Isigma, log = TRUE)#
#
}#
#
likelihood(c(10, 2))#

fit = optim(par = c(10, 2), fn = likelihood, lower = rep(0, 2),#
            method = "L-BFGS-B")#

likelihood = function(params){#
    prod = params[1]#
    imp = params[2]#
    food = params[3]#
    s = -prod - imp + food#
    -dnorm(prod, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(food, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(imp, mean = Imean, sd = Isigma, log = TRUE) -#
        dnorm(s, mean = Smean, sd = Ssigma, log = TRUE)#
}#

likelihood(c(10, 2,3))#

likelihood(c(100, 2,3))#

stock = -fit$par[1]-fit$par[2]+fit$par[3]#

10.000000+1.977558-8.976661+3.000898#

likelihood = function(params){#
    prod = params[1]#
    imp = params[2]#
    stock = params[3]#
    food = prod + imp + stock#
    -dnorm(prod, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(food, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(imp, mean = Imean, sd = Isigma, log = TRUE) -#
        dnorm(stock, mean = Smean, sd = Ssigma, log = TRUE)#
}#

likelihood(c(10, 2,0))#

likelihood(c(100, 2,0))#

fit = optim(par = c(10, 2, 0), fn = likelihood, lower = rep(0, 3),#
            method = "L-BFGS-B")#

food = sum(fit$par)#

food#

c(fit$par, food)#

likelihood = function(params){#
    prod = params[1]#
    imp = params[2]#
    food = params[3]#
    stock = food - prod - imp#
    -dnorm(prod, mean = Pmean, sd = Psigma, log = TRUE) -#
        dnorm(food, mean = Fmean, sd = Fsigma, log = TRUE) -#
        dnorm(imp, mean = Imean, sd = Isigma, log = TRUE) -#
        dnorm(stock, mean = Smean, sd = Ssigma, log = TRUE)#
}#

likelihood(c(10, 2,3))#
likelihood(c(100, 2,3))#

fit = optim(par = c(10, 2, 3), fn = likelihood, lower = rep(0, 3),#
            method = "L-BFGS-B")#

fit#

stock = fit$par[3] - fit$par[1] - fit$par[2]#

stock#

c(fit$par, stock)#

sum(c(fit$par, stock))#

10 -8#

10 - 9#

10 + 2 + 9#

ttab_like #

tab#

tail(tab)#

unique(tab$fbsDistribParam)#

?dbeta#

x <- seq(0, 1, length = 21)#
dbeta(x, 1, 1)#

pbeta(x,1,1)#

  if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {#
    eps <- 1e-10#
    x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)#
  } else {#
    x <- seq(0, 1, length = 1025)#
  }#
  fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))#
  f <- fx; f[fx == Inf] <- 1e100#
  matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,#
          main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))#
  abline(0,1,     col="gray", lty=3)#
  abline(h = 0:1, col="gray", lty=3)#
  legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),#
         col=1:3, lty=1:3, bty = "n")#
  invisible(cbind(x, fx))#
}#
pl.beta(3,1)#

pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {#
  if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {#
    eps <- 1e-10#
    x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)#
  } else {#
    x <- seq(0, 1, length = 1025)#
  }#
  fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))#
  f <- fx; f[fx == Inf] <- 1e100#
  matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,#
          main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))#
  abline(0,1,     col="gray", lty=3)#
  abline(h = 0:1, col="gray", lty=3)#
  legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),#
         col=1:3, lty=1:3, bty = "n")#
  invisible(cbind(x, fx))#
}#
pl.beta(3,1)#

elements =  c(51,61,91,71,101,111,141,151,121)#
names(elements) = c("Production","Imports","Exports","StockChanges",#
			"Feed","Seed","Food","Industrial","Losses")#

ttab = tab_fl %>%#
	group_by(geographicAreaM49, timePointYears, #
		measuredElement,measuredItemCPC) %>%#
	summarize(#
		Dist = paste(fbsDistribParam, collapse=","),#
		Values = paste(Value, collapse = ",")#
	)#

ttab#

tail(ttab)#

edi(ttab)#

edit(ttab)#

?dexp#

dnorm(100,0,0)#

dnorm(1000,0,0)#
#

dnorm(1000,0,0)#

ttab_like#

ttab_like$nelements#

example = filter(ttab_like,nelements==8)#

example$params#

NAs#

intersect(example$measuredItemCPC,NAs$measuredItemCPC)#

exampls#

example#

example$Likelihood#

install.packages("truncnorm")#

install.packages("~/Downloads/truncnorm_1.0-7.tar.gz",repos=NULL,type="source")#

library(truncnorm)#

exampleFlagTable =#
    data.frame(flagObservationStatus = c("", "E", "I"),#
               flagObservationWeights = c(1, 0.2, 0.6))#

exampleFlagTable#

exampleSUA.df =#
    data.frame(product = c("wheat", "wheat flour"),#
               productionValue = c(100, 96),#
               productionFlag = c("", "E"),#
               importValue = c(10, 0),#
               importFlag = c("", ""),#
               exportValue = c(50, 0),#
               exportFlag = c("", ""),#
               foodValue = c(0, 80),#
               foodFlag = c("E", "E"),#
               seedValue = c(20, 0),#
               seedFlag = c("", "E"),#
               wasteValue = c(20, 16),#
               wasteFlag = c("I", "E"),#
               foodManuValue = c(100, 0),#
               foodManuFlag = c("E", ""))#

exampleSUA.df#

exampleFBS.df =#
	data.frame(product = "wheat and products",#
           productionValue = 220,#
           importValue = 10,#
           exportValue = 50,#
           foodValue = 100, seedValue = 20,#
           wasteValue = 40,#
           foodManuValue = 100)#

exampleFBS.df#

?parameterise#

parameterise(obsValue = 22000, selfInformation = -log(0.8), distribution = "normal")#

library(devtools)#

install_github(repo = "SWS-Methodology/faoswsFlag")#

unload("faoswdFlag")#

unload("faoswsFlag")#

detach("package:faoswsFlag", unload=TRUE)#

detach("package:faoswsUtil", unload=TRUE)#

session_info()#

install_github("mkao006/sws_flag")#

library(faoswsFlag)#

sessionInfo()#

